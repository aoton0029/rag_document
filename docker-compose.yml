name: dev

volumes:
  postgres_storage:
  etcd_storage:
  minio_storage:
  milvus_storage:
  neo4j_storage:
  redis_storage:
  mongodb_storage:
  ollama_models:
  n8n_storage:

networks:
  n8n-network:
    name: n8n

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['n8n-network']
  environment:
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
    - MILVUS_HOST=${MILVUS_HOST:-milvus:19530}
    - MILVUS_PORT=${MILVUS_PORT:-19530}
    - NEO4J_HOST=${NEO4J_HOST:-neo4j:7687}
    - NEO4J_PORT=${NEO4J_PORT:-7687}
    - REDIS_HOST=${REDIS_HOST:-redis:6379}
    - REDIS_PORT=${REDIS_PORT:-6379}
    - MONGODB_HOST=${MONGODB_HOST:-mongodb:27017}
    - MONGODB_PORT=${MONGODB_PORT:-27017}
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DATABASE}
    - DB_POSTGRESDB_USER=${COMMON_USERNAME}
    - DB_POSTGRESDB_PASSWORD=${COMMON_PASSWORD}
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['n8n-network']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_models:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['n8n-network']
  container_name: ollama-pull-llama
  volumes:
    - ollama_models:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    networks: ['n8n-network']
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${COMMON_USERNAME}
      - POSTGRES_PASSWORD=${COMMON_PASSWORD}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${COMMON_USERNAME} -d ${POSTGRES_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true
  
  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows"
    volumes:
      - ./volumes/n8n-data/demo-data:/demo-data
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/n8n:/home/node/.n8n
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/n8n-data/demo-data:/demo-data
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/n8n-data/shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
  
  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama
    container_name: ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    container_name: ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-gpu

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    networks: ['n8n-network']
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
      # - ETCD_HEARTBEAT_INTERVAL=100
      # - ETCD_ELECTION_TIMEOUT=1000
    volumes:
      - etcd_storage:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    networks: ['n8n-network']
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_storage:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    container_name: milvus
    image: milvusdb/milvus:v2.6.1
    command: ["milvus", "run", "standalone"]
    networks: ['n8n-network']
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MQ_TYPE: woodpecker
    volumes:
      - milvus_storage:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
  
  neo4j:
    image: neo4j:2025.08.0-community
    container_name: neo4j
    networks: ['n8n-network']
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/p@ssw0rd
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_storage:/data
      - ./volumes/neo4j/plugins:/plugins
      - ./volumes/neo4j/import:/var/lib/neo4j/import
      - ./volumes/neo4j/logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p ${COMMON_PASSWORD} 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true

  redis:
    image: redis:7-alpine
    container_name: redis
    networks: ['n8n-network']
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${COMMON_PASSWORD}
    volumes:
      - redis_storage:/data
      - ./volumes/redis/conf:/usr/local/etc/redis
    command: >
      sh -c "
        if [ -n \"${COMMON_PASSWORD}\" ]; then
          redis-server --appendonly yes --requirepass ${COMMON_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
        else
          redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
        fi
      "
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true

  mongodb:
    image: mongo:7
    container_name: mongodb
    networks: ['n8n-network']
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${COMMON_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${COMMON_PASSWORD}
    volumes:
      - mongodb_storage:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - path: .env
        required: true

  # MongoDB Express for MongoDB GUI
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    networks: ['n8n-network']
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${COMMON_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${COMMON_PASSWORD}
      - ME_CONFIG_MONGODB_URL=mongodb://${COMMON_USERNAME}:${COMMON_PASSWORD}@mongodb:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=${COMMON_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${COMMON_PASSWORD}
    depends_on:
      mongodb:
        condition: service_healthy

